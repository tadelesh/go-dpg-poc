//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package developer

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

type DPGClient struct {
	pl runtime.Pipeline
}

// NewDPGClient creates a new instance of DPGClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewDPGClient(pl runtime.Pipeline) *DPGClient {
	client := &DPGClient{
		pl: pl,
	}
	return client
}

// GetModel - Get models that you will either return to end users as a raw body, or with a model added during grow up.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// mode - The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model'
// if you are going to convert the raw body to a customized body before returning to
// users.
// options - DPGClientGetModelOptions contains the optional parameters for the DPGClient.GetModel method.
func (client *DPGClient) GetModel(ctx context.Context, mode string, options *DPGClientGetModelOptions) (DPGClientGetModelResponse, error) {
	req, err := client.getModelCreateRequest(ctx, mode, options)
	if err != nil {
		return DPGClientGetModelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DPGClientGetModelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DPGClientGetModelResponse{}, runtime.NewResponseError(resp)
	}
	return client.getModelHandleResponse(resp)
}

// getModelCreateRequest creates the GetModel request.
func (client *DPGClient) getModelCreateRequest(ctx context.Context, mode string, options *DPGClientGetModelOptions) (*policy.Request, error) {
	urlPath := "/customization/model/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getModelHandleResponse handles the GetModel response.
func (client *DPGClient) getModelHandleResponse(resp *http.Response) (DPGClientGetModelResponse, error) {
	result := DPGClientGetModelResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return DPGClientGetModelResponse{}, err
	}
	return result, nil
}

// NewGetPagesPager - Get pages that you will either return to users in pages of raw bodies, or pages of models following
// growup.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// mode - The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model'
// if you are going to convert the raw body to a customized body before returning to
// users.
// options - DPGClientGetPagesOptions contains the optional parameters for the DPGClient.GetPages method.
func (client *DPGClient) NewGetPagesPager(mode string, options *DPGClientGetPagesOptions) (*runtime.Pager[DPGClientGetPagesResponse]) {
	return runtime.NewPager(runtime.PagingHandler[DPGClientGetPagesResponse]{
		More: func(page DPGClientGetPagesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DPGClientGetPagesResponse) (DPGClientGetPagesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getPagesCreateRequest(ctx, mode, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DPGClientGetPagesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return DPGClientGetPagesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DPGClientGetPagesResponse{}, runtime.NewResponseError(resp)
			}
			return client.getPagesHandleResponse(resp)
		},
	})
}

// getPagesCreateRequest creates the GetPages request.
func (client *DPGClient) getPagesCreateRequest(ctx context.Context, mode string, options *DPGClientGetPagesOptions) (*policy.Request, error) {
	urlPath := "/customization/paging/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPagesHandleResponse handles the GetPages response.
func (client *DPGClient) getPagesHandleResponse(resp *http.Response) (DPGClientGetPagesResponse, error) {
	result := DPGClientGetPagesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return DPGClientGetPagesResponse{}, err
	}
	return result, nil
}

// BeginLro - Long running put request that will either return to end users a final payload of a raw body, or a final payload
// of a model after the SDK has grown up.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// mode - The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model'
// if you are going to convert the raw body to a customized body before returning to
// users.
// options - DPGClientBeginLroOptions contains the optional parameters for the DPGClient.BeginLro method.
func (client *DPGClient) BeginLro(ctx context.Context, mode string, options *DPGClientBeginLroOptions) (*runtime.Poller[DPGClientLroResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.lro(ctx, mode, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[DPGClientLroResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[DPGClientLroResponse](options.ResumeToken, client.pl, nil)
	}
}

// Lro - Long running put request that will either return to end users a final payload of a raw body, or a final payload of
// a model after the SDK has grown up.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
func (client *DPGClient) lro(ctx context.Context, mode string, options *DPGClientBeginLroOptions) (*http.Response, error) {
	req, err := client.lroCreateRequest(ctx, mode, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// lroCreateRequest creates the Lro request.
func (client *DPGClient) lroCreateRequest(ctx context.Context, mode string, options *DPGClientBeginLroOptions) (*policy.Request, error) {
	urlPath := "/customization/lro/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// PostModel - Post either raw response as a model and pass in 'raw' for mode, or grow up your operation to take a model instead,
// and put in 'model' as mode.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// mode - The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model'
// if you are going to convert the raw body to a customized body before returning to
// users.
// input - Please put {'hello': 'world!'}
// options - DPGClientPostModelOptions contains the optional parameters for the DPGClient.PostModel method.
func (client *DPGClient) PostModel(ctx context.Context, mode string, input Input, options *DPGClientPostModelOptions) (DPGClientPostModelResponse, error) {
	req, err := client.postModelCreateRequest(ctx, mode, input, options)
	if err != nil {
		return DPGClientPostModelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DPGClientPostModelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DPGClientPostModelResponse{}, runtime.NewResponseError(resp)
	}
	return client.postModelHandleResponse(resp)
}

// postModelCreateRequest creates the PostModel request.
func (client *DPGClient) postModelCreateRequest(ctx context.Context, mode string, input Input, options *DPGClientPostModelOptions) (*policy.Request, error) {
	urlPath := "/customization/model/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, input)
}

// postModelHandleResponse handles the PostModel response.
func (client *DPGClient) postModelHandleResponse(resp *http.Response) (DPGClientPostModelResponse, error) {
	result := DPGClientPostModelResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return DPGClientPostModelResponse{}, err
	}
	return result, nil
}

