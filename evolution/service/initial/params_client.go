//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package initial

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

type ParamsClient struct {
	pl runtime.Pipeline
}

// NewParamsClient creates a new instance of ParamsClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewParamsClient(pl runtime.Pipeline) *ParamsClient {
	client := &ParamsClient{
		pl: pl,
	}
	return client
}

// GetOptional - Get true Boolean value on path. Initially has one optional query parameter. After evolution, a new optional
// query parameter is added
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// options - ParamsClientGetOptionalOptions contains the optional parameters for the ParamsClient.GetOptional method.
func (client *ParamsClient) GetOptional(ctx context.Context, options *ParamsClientGetOptionalOptions) (ParamsClientGetOptionalResponse, error) {
	req, err := client.getOptionalCreateRequest(ctx, options)
	if err != nil {
		return ParamsClientGetOptionalResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ParamsClientGetOptionalResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ParamsClientGetOptionalResponse{}, runtime.NewResponseError(resp)
	}
	return client.getOptionalHandleResponse(resp)
}

// getOptionalCreateRequest creates the GetOptional request.
func (client *ParamsClient) getOptionalCreateRequest(ctx context.Context, options *ParamsClientGetOptionalOptions) (*policy.Request, error) {
	urlPath := "/serviceDriven/moreParameters"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.OptionalParam != nil {
		reqQP.Set("optionalParam", *options.OptionalParam)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOptionalHandleResponse handles the GetOptional response.
func (client *ParamsClient) getOptionalHandleResponse(resp *http.Response) (ParamsClientGetOptionalResponse, error) {
	result := ParamsClientGetOptionalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return ParamsClientGetOptionalResponse{}, err
	}
	return result, nil
}

// GetRequired - Get true Boolean value on path. Initially only has one required Query Parameter. After evolution, a new optional
// query parameter is added
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// parameter - I am a required parameter
// options - ParamsClientGetRequiredOptions contains the optional parameters for the ParamsClient.GetRequired method.
func (client *ParamsClient) GetRequired(ctx context.Context, parameter string, options *ParamsClientGetRequiredOptions) (ParamsClientGetRequiredResponse, error) {
	req, err := client.getRequiredCreateRequest(ctx, parameter, options)
	if err != nil {
		return ParamsClientGetRequiredResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ParamsClientGetRequiredResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ParamsClientGetRequiredResponse{}, runtime.NewResponseError(resp)
	}
	return client.getRequiredHandleResponse(resp)
}

// getRequiredCreateRequest creates the GetRequired request.
func (client *ParamsClient) getRequiredCreateRequest(ctx context.Context, parameter string, options *ParamsClientGetRequiredOptions) (*policy.Request, error) {
	urlPath := "/serviceDriven/parameters"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("parameter", parameter)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getRequiredHandleResponse handles the GetRequired response.
func (client *ParamsClient) getRequiredHandleResponse(resp *http.Response) (ParamsClientGetRequiredResponse, error) {
	result := ParamsClientGetRequiredResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return ParamsClientGetRequiredResponse{}, err
	}
	return result, nil
}

// HeadNoParams - Head request, no params. Initially has no query parameters. After evolution, a new optional query parameter
// is added
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// options - ParamsClientHeadNoParamsOptions contains the optional parameters for the ParamsClient.HeadNoParams method.
func (client *ParamsClient) HeadNoParams(ctx context.Context, options *ParamsClientHeadNoParamsOptions) (ParamsClientHeadNoParamsResponse, error) {
	req, err := client.headNoParamsCreateRequest(ctx, options)
	if err != nil {
		return ParamsClientHeadNoParamsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ParamsClientHeadNoParamsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ParamsClientHeadNoParamsResponse{}, runtime.NewResponseError(resp)
	}
	return client.headNoParamsHandleResponse(resp)
}

// headNoParamsCreateRequest creates the HeadNoParams request.
func (client *ParamsClient) headNoParamsCreateRequest(ctx context.Context, options *ParamsClientHeadNoParamsOptions) (*policy.Request, error) {
	urlPath := "/serviceDriven/parameters"
	req, err := runtime.NewRequest(ctx, http.MethodHead, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// headNoParamsHandleResponse handles the HeadNoParams response.
func (client *ParamsClient) headNoParamsHandleResponse(resp *http.Response) (ParamsClientHeadNoParamsResponse, error) {
	result := ParamsClientHeadNoParamsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return ParamsClientHeadNoParamsResponse{}, err
	}
	return result, nil
}

// PostParameters - POST a JSON
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// parameter - I am a body parameter. My only valid JSON entry is { url: "http://example.org/myimage.jpeg" }
// options - ParamsClientPostParametersOptions contains the optional parameters for the ParamsClient.PostParameters method.
func (client *ParamsClient) PostParameters(ctx context.Context, parameter PostInput, options *ParamsClientPostParametersOptions) (ParamsClientPostParametersResponse, error) {
	req, err := client.postParametersCreateRequest(ctx, parameter, options)
	if err != nil {
		return ParamsClientPostParametersResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ParamsClientPostParametersResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ParamsClientPostParametersResponse{}, runtime.NewResponseError(resp)
	}
	return client.postParametersHandleResponse(resp)
}

// postParametersCreateRequest creates the PostParameters request.
func (client *ParamsClient) postParametersCreateRequest(ctx context.Context, parameter PostInput, options *ParamsClientPostParametersOptions) (*policy.Request, error) {
	urlPath := "/serviceDriven/parameters"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameter)
}

// postParametersHandleResponse handles the PostParameters response.
func (client *ParamsClient) postParametersHandleResponse(resp *http.Response) (ParamsClientPostParametersResponse, error) {
	result := ParamsClientPostParametersResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return ParamsClientPostParametersResponse{}, err
	}
	return result, nil
}

// PutRequiredOptional - Initially has one required query parameter and one optional query parameter. After evolution, a new
// optional query parameter is added
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// requiredParam - I am a required parameter
// options - ParamsClientPutRequiredOptionalOptions contains the optional parameters for the ParamsClient.PutRequiredOptional
// method.
func (client *ParamsClient) PutRequiredOptional(ctx context.Context, requiredParam string, options *ParamsClientPutRequiredOptionalOptions) (ParamsClientPutRequiredOptionalResponse, error) {
	req, err := client.putRequiredOptionalCreateRequest(ctx, requiredParam, options)
	if err != nil {
		return ParamsClientPutRequiredOptionalResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ParamsClientPutRequiredOptionalResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ParamsClientPutRequiredOptionalResponse{}, runtime.NewResponseError(resp)
	}
	return client.putRequiredOptionalHandleResponse(resp)
}

// putRequiredOptionalCreateRequest creates the PutRequiredOptional request.
func (client *ParamsClient) putRequiredOptionalCreateRequest(ctx context.Context, requiredParam string, options *ParamsClientPutRequiredOptionalOptions) (*policy.Request, error) {
	urlPath := "/serviceDriven/parameters"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("requiredParam", requiredParam)
	if options != nil && options.OptionalParam != nil {
		reqQP.Set("optionalParam", *options.OptionalParam)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// putRequiredOptionalHandleResponse handles the PutRequiredOptional response.
func (client *ParamsClient) putRequiredOptionalHandleResponse(resp *http.Response) (ParamsClientPutRequiredOptionalResponse, error) {
	result := ParamsClientPutRequiredOptionalResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return ParamsClientPutRequiredOptionalResponse{}, err
	}
	return result, nil
}

