//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package developer

import (
	"context"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

type GlassBreakerClient struct {
	pl runtime.Pipeline
}

func NewGlassBreakerClient(pl runtime.Pipeline) *DPGClient {
	client := &DPGClient{
		pl: pl,
	}
	return client
}

func (client *DPGClient) Do(ctx context.Context, urlPath string, httpMethod string, options *RequestOptions) ([]byte, error) {
	req, err := runtime.NewRequest(ctx, httpMethod, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.QueryParam != nil && len(options.QueryParam)>0 {
		reqQP := req.Raw().URL.Query()
		for k,v := range(options.QueryParam) {
			reqQP.Set(k,v)
		}
		req.Raw().URL.RawQuery = reqQP.Encode()
	}
	if options != nil && options.Header != nil && len(options.Header)>0 {
		req.Raw().Header = options.Header
	}
	if options != nil && options.Body != nil {
		req.SetBody(options.Body, options.ContentType)
	}
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, runtime.NewResponseError(resp)
	}
	return runtime.Payload(resp)
}
