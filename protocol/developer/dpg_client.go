//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package developer

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/streaming"
)

type DPGClient struct {
	pl runtime.Pipeline
} // find a way separate protocol client and model client to make it possible to reuse operation name

// NewDPGClient creates a new instance of DPGClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewDPGClient(pl runtime.Pipeline) *DPGClient {
	client := &DPGClient{
		pl: pl,
	}
	return client
}

func (client *DPGClient) GetModel(ctx context.Context, mode string, options *DPGClientGetModelOptions) (DPGClientGetModelResponse, error) {
	payload, err := client.GetModelRaw(ctx, mode, &RequestOptions{Header: map[string][]string{"Accept": {"application/json"}}})
	if err != nil {
		return DPGClientGetModelResponse{}, err
	}
	result := DPGClientGetModelResponse{}
	err = json.Unmarshal(payload, &result.Product)
	if err != nil {
		return DPGClientGetModelResponse{}, err
	}
	return result, nil
}

func (client *DPGClient) GetModelRaw(ctx context.Context, mode string, options *RequestOptions) ([]byte, error) {
	req, err := client.getModelCreateRequestRaw(ctx, mode, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, runtime.NewResponseError(resp)
	}
	return runtime.Payload(resp)
}

func (client *DPGClient) getModelCreateRequestRaw(ctx context.Context, mode string, options *RequestOptions) (*policy.Request, error) {
	urlPath := "/customization/model/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.QueryParam != nil && len(options.QueryParam) > 0 {
		reqQP := req.Raw().URL.Query()
		for k, v := range options.QueryParam {
			reqQP.Set(k, v)
		}
		req.Raw().URL.RawQuery = reqQP.Encode()
	}
	if options != nil && options.Header != nil && len(options.Header) > 0 {
		req.Raw().Header = options.Header
	}
	return req, nil
}

// NewGetPagesPager - Get pages that you will either return to users in pages of raw bodies, or pages of models following
// growup.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// mode - The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model'
// if you are going to convert the raw body to a customized body before returning to
// users.
// options - DPGClientGetPagesOptions contains the optional parameters for the DPGClient.GetPages method.
func (client *DPGClient) NewGetPagesPager(mode string, options *DPGClientGetPagesOptions) *runtime.Pager[DPGClientGetPagesResponse] {
	return runtime.NewPager(runtime.PagingHandler[DPGClientGetPagesResponse]{
		More: func(page DPGClientGetPagesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DPGClientGetPagesResponse) (DPGClientGetPagesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getPagesCreateRequestRaw(ctx, mode, &RequestOptions{Header: map[string][]string{"Accept": {"application/json"}}})
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DPGClientGetPagesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return DPGClientGetPagesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DPGClientGetPagesResponse{}, runtime.NewResponseError(resp)
			}
			return client.getPagesHandleResponse(resp)
		},
	})
}

func (client *DPGClient) NewGetPagesPagerRaw(mode string, options *RequestOptions) *runtime.Pager[[]byte] {
	return runtime.NewPager(runtime.PagingHandler[[]byte]{
		More: func(page []byte) bool {
			nextLink, err := client.getPagesParseNextLink(page)
			if err != nil {
				return false
			}
			return nextLink != nil && len(*nextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *[]byte) ([]byte, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.getPagesCreateRequestRaw(ctx, mode, options)
			} else {
				nextLink, err := client.getPagesParseNextLink(*page)
				if err != nil {
					return nil, err
				}
				req, err = runtime.NewRequest(ctx, http.MethodGet, *nextLink)
			}
			if err != nil {
				return nil, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return nil, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return nil, runtime.NewResponseError(resp)
			}
			return runtime.Payload(resp)
		},
	})
}

func (client *DPGClient) getPagesParseNextLink(body []byte) (*string, error) {
	pageValue := &map[string]interface{}{}
	err := json.Unmarshal(body, pageValue)
	if err != nil {
		return nil, fmt.Errorf("unmarshalling body %T: %s", body, err)
	}
	if (*pageValue)["nextLink"] == nil {
		return nil, nil
	} else {
		nextLink := (*pageValue)["nextLink"].(string)
		return &nextLink, nil
	}
}

func (client *DPGClient) getPagesCreateRequestRaw(ctx context.Context, mode string, options *RequestOptions) (*policy.Request, error) {
	urlPath := "/customization/paging/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.QueryParam != nil && len(options.QueryParam) > 0 {
		reqQP := req.Raw().URL.Query()
		for k, v := range options.QueryParam {
			reqQP.Set(k, v)
		}
		req.Raw().URL.RawQuery = reqQP.Encode()
	}
	if options != nil && options.Header != nil && len(options.Header) > 0 {
		req.Raw().Header = options.Header
	}
	return req, nil
}

// getPagesHandleResponse handles the GetPages response.
func (client *DPGClient) getPagesHandleResponse(resp *http.Response) (DPGClientGetPagesResponse, error) {
	result := DPGClientGetPagesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductResult); err != nil {
		return DPGClientGetPagesResponse{}, err
	}
	return result, nil
}

// BeginLro - Long running put request that will either return to end users a final payload of a raw body, or a final payload
// of a model after the SDK has grown up.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 1.0.0
// mode - The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model'
// if you are going to convert the raw body to a customized body before returning to
// users.
// options - DPGClientBeginLroOptions contains the optional parameters for the DPGClient.BeginLro method.
func (client *DPGClient) BeginLro(ctx context.Context, mode string, options *DPGClientBeginLroOptions) (*runtime.Poller[DPGClientLroResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.lroRaw(ctx, mode, &LRORequestOptions{RequestOptions: RequestOptions{Header: map[string][]string{"Accept": {"application/json"}}}})
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[DPGClientLroResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[DPGClientLroResponse](options.ResumeToken, client.pl, nil)
	}
}

// TODO, current implementation can not work, need to change azcore.
func (client *DPGClient) BeginLroRaw(ctx context.Context, mode string, options *LRORequestOptions) (*runtime.Poller[[]byte], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.lroRaw(ctx, mode, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[[]byte](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[[]byte](options.ResumeToken, client.pl, nil)
	}
}

func (client *DPGClient) lroRaw(ctx context.Context, mode string, options *LRORequestOptions) (*http.Response, error) {
	req, err := client.lroCreateRequestRaw(ctx, mode, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

func (client *DPGClient) lroCreateRequestRaw(ctx context.Context, mode string, options *LRORequestOptions) (*policy.Request, error) {
	urlPath := "/customization/lro/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.QueryParam != nil && len(options.QueryParam) > 0 {
		reqQP := req.Raw().URL.Query()
		for k, v := range options.QueryParam {
			reqQP.Set(k, v)
		}
		req.Raw().URL.RawQuery = reqQP.Encode()
	}
	if options != nil && options.Header != nil && len(options.Header) > 0 {
		req.Raw().Header = options.Header
	}
	if options != nil && options.Body != nil {
		req.SetBody(options.Body, options.ContentType)
	}
	return req, nil
}

func (client *DPGClient) PostModel(ctx context.Context, mode string, input Input, options *DPGClientPostModelOptions) (DPGClientPostModelResponse, error) {
	body, err := json.Marshal(&input)
	if err != nil {
		return DPGClientPostModelResponse{}, err
	}
	requestOptions := RequestOptions{
		Body:        streaming.NopCloser(bytes.NewReader(body)),
		Header:      map[string][]string{"Accept": {"application/json"}},
		ContentType: "application/json",
	}
	payload, err := client.PostModelRaw(ctx, mode, &requestOptions)
	if err != nil {
		return DPGClientPostModelResponse{}, err
	}
	result := DPGClientPostModelResponse{}
	err = json.Unmarshal(payload, &result.Product)
	if err != nil {
		return DPGClientPostModelResponse{}, err
	}
	return result, nil
}

func (client *DPGClient) PostModelRaw(ctx context.Context, mode string, options *RequestOptions) ([]byte, error) {
	req, err := client.postModelCreateRequestRaw(ctx, mode, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, runtime.NewResponseError(resp)
	}
	return runtime.Payload(resp)
}

func (client *DPGClient) postModelCreateRequestRaw(ctx context.Context, mode string, options *RequestOptions) (*policy.Request, error) {
	urlPath := "/customization/model/{mode}"
	urlPath = strings.ReplaceAll(urlPath, "{mode}", mode)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.QueryParam != nil && len(options.QueryParam) > 0 {
		reqQP := req.Raw().URL.Query()
		for k, v := range options.QueryParam {
			reqQP.Set(k, v)
		}
		req.Raw().URL.RawQuery = reqQP.Encode()
	}
	if options != nil && options.Header != nil && len(options.Header) > 0 {
		req.Raw().Header = options.Header
	}
	if options != nil && options.Body != nil {
		req.SetBody(options.Body, options.ContentType)
	}
	return req, nil
}

func (client *DPGClient) SendRequest(ctx context.Context, urlPath, httpMethod string, query map[string]string, header http.Header, body io.ReadSeekCloser) ([]byte, error) {
	req, err := runtime.NewRequest(ctx, httpMethod, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if query != nil && len(query) > 0 {
		reqQP := req.Raw().URL.Query()
		for k, v := range query {
			reqQP.Set(k, v)
		}
		req.Raw().URL.RawQuery = reqQP.Encode()
	}
	if header != nil && len(header) > 0 {
		req.Raw().Header = header
	}
	if body != nil {
		req.SetBody(body, req.Raw().Header.Get("Content-Type"))
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, runtime.NewResponseError(resp)
	}
	return runtime.Payload(resp)
}
